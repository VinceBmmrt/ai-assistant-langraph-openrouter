import { Tool } from "@langchain/core/tools";

export class CheckAvailabilityTool extends Tool {
  args = { query: { start: "start", end: "end" } };
  name = "check_availability";
  description = `
    V√©rifie la disponibilit√© d'un cr√©neau horaire dans le Google Calendar de l'utilisateur.
    Le cr√©neau est consid√©r√© comme occup√© si un √©v√©nement existe durant cette p√©riode.

  

    input = {"start": "2025-04-30T12:00:00+02:00", "end": "2025-04-30T13:00:00+02:00"}
  `;

  googleToken: string;

  constructor(googleToken: string) {
    super();
    this.googleToken = googleToken;
  }

  async _call(input: string): Promise<string> {
    console.log("üöÄ ~ input:", input);

    try {
      const { start, end } = JSON.parse(input);

      if (!this.googleToken) {
        return "Token d'acc√®s non disponible. Veuillez fournir un accessToken.";
      }

      const requestBody = {
        timeMin: start,
        timeMax: end,
        timeZone: "UTC", // Le fuseau horaire de la r√©ponse, tu peux le modifier si n√©cessaire
        items: [
          { id: "primary" }, // Utilise "primary" pour l'agenda principal de l'utilisateur
        ],
      };

      // Envoi de la requ√™te POST √† l'API Google Calendar
      const response = await fetch(
        "https://www.googleapis.com/calendar/v3/freeBusy",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${this.googleToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestBody),
        }
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Erreur Google API:", errorText);
        return `Erreur lors de la v√©rification de la disponibilit√©: ${errorText}`;
      }

      const data = await response.json();
      console.log("R√©ponse de l'API:", data);

      // V√©rifie s'il y a des p√©riodes occup√©es dans la r√©ponse
      const busyPeriods = data.calendars.primary?.busy;

      if (busyPeriods && busyPeriods.length > 0) {
        return "Le cr√©neau horaire est d√©j√† occup√© par un ou plusieurs √©v√©nements.";
      } else {
        return "Le cr√©neau horaire est disponible.";
      }
    } catch (error) {
      console.error("Erreur dans _call:", error);
      return "Erreur lors de la v√©rification de la disponibilit√©.";
    }
  }
}
